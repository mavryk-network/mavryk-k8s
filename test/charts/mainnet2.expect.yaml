---
# Source: mavryk-chain/templates/configs.yaml
---

apiVersion: v1
data:
  ACCOUNTS: |
    e30=
kind: Secret
metadata:
  name: mavryk-secret
  namespace: testing
---
# Source: mavryk-chain/templates/configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mavryk-config
  namespace: testing
data:
  CHAIN_NAME: "mainnet"
  CHAIN_PARAMS: |
    {
      "bootstrap_peers": [],
      "default_bootstrap_mumav": "4000000000000",
      "expected-proof-of-work": 26,

      "should_generate_unsafe_deterministic_data": false,
      "network": {
          "chain_name": "mainnet"
        },
      "protocol_activation": null
    }
  FULL_SNAPSHOT_URL: ""
  FULL_TARBALL_URL: ""
  ROLLING_SNAPSHOT_URL: ""
  ROLLING_TARBALL_URL: ""
  ARCHIVE_TARBALL_URL: ""
  PREFER_TARBALLS: "false"
  MAVKIT_VERSION: "mavrykdynamics/mavryk:v19.3"
  NODE_GLOBALS: |
    {
      "config": {},
      "env": {
        "all": {
          "key": "outer-value"
        },
        "mavkit-node": {
          "MAVRYK_LOG": "* -\u003e DEBUG"
        },
        "snapshot-downloader": {
          "key": "outer-container"
        }
      }
    }

  NODES: |
    {
      "city-block": {
        "instances": [
          {}
        ],
        "runs": [
          "tezedge_node",
          "logger",
          "metrics"
        ]
      },
      "country-town": {
        "env": {
          "all": {
            "key": "specific-pod"
          },
          "snapshot-downloader": {
            "key": "specific-container"
          }
        },
        "images": {
          "mavkit": "mavrykdynamics/mavryk:v15-release"
        },
        "instances": [
          {
            "config": {
              "shell": {
                "history_mode": "rolling"
              }
            }
          },
          {
            "config": {
              "shell": {
                "history_mode": {
                  "rolling": {
                    "additional_cycles": 5
                  }
                }
              }
            }
          }
        ],
        "resources": {
          "limits": {
            "memory": "16192Mi"
          },
          "requests": {
            "memory": "16192Mi"
          }
        },
        "runs": [
          "mavkit_node",
          "logger",
          "metrics"
        ]
      }
    }

  MAVKIT_SIGNERS: |
    {}
  TACOINFRA_SIGNERS: |
    {}
---
# Source: mavryk-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: mavryk-node-rpc
  namespace: testing
spec:
  ports:
    - port: 8732
      name: rpc
  selector:
    appType: mavkit-node
  type: NodePort
---
# Source: mavryk-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: city-block
  labels:
    appType: mavkit-node
spec:
  ports:
    - port: 8732
      name: rpc
    - port: 9732
      name: p2p
    - port: 9932
      name: metrics
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: city-block
---
# Source: mavryk-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: country-town
  labels:
    appType: mavkit-node
spec:
  ports:
    - port: 8732
      name: rpc
    - port: 9732
      name: p2p
    - port: 9932
      name: metrics
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: country-town
---
# Source: mavryk-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: city-block
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: city-block
  selector:
    matchLabels:
      node_class: city-block
  template:
    metadata:
      labels:
        appType: mavkit-node
        node_class: city-block
    spec:
      containers:        
        - name: mavkit-node
          image: "mavrykdynamics/mavryk:v19.3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              #!/bin/sh
              
              set -xe
              
              # ensure we can run mavkit-client commands without specifying client dir
              ln -s /var/mavryk/client /home/mavryk/.mavryk-client
              #
              # Not every error is fatal on start.  In particular, with zerotier,
              # the listen-addr may not yet be bound causing mavkit-node to fail.
              # So, we try a few times with increasing delays:
              
              for d in 1 1 5 10 20 60 120; do
              	/usr/local/bin/mavkit-node run				\
              			--synchronisation-threshold 0		\
              			--config-file /etc/mavryk/config.json
              	sleep $d
              done
              
              #
              # Keep the container alive for troubleshooting on failures:
              
              sleep 3600
              
          envFrom:
          env:
            - name: DAEMON
              value: mavkit-node
            - name:  MAVRYK_LOG
              value: "* -> DEBUG"
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
          ports:
            - containerPort: 8732
              name: mavryk-rpc
            - containerPort: 9732
              name: mavryk-net
            - containerPort: 9932
              name: metrics
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732                        
        - name: logger
          image: "ghcr.io/mavryk-network/mavryk-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - logger
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: logger
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume                
        - name: sidecar
          image: "ghcr.io/mavryk-network/mavryk-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: sidecar
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 80Mi                
      initContainers:        
        - name: config-init
          image: "mavrykdynamics/mavryk:v19.3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -e
              
              echo "Writing custom configuration for public node"
              mkdir -p /etc/mavryk/data
              
              # if config already exists (container is rebooting), dump and delete it.
              if [ -e /etc/mavryk/data/config.json ]; then
                printf "Found pre-existing config.json:\n"
                cat /etc/mavryk/data/config.json
                printf "Deleting\n"
                rm -rvf /etc/mavryk/data/config.json
              fi
              
              /usr/local/bin/mavkit-node config init		\
                  --config-file /etc/mavryk/data/config.json	\
                  --data-dir /etc/mavryk/data			\
                  --network $CHAIN_NAME
              
              cat /etc/mavryk/data/config.json
              
              printf "\n\n\n\n\n\n\n"
              
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: config-init
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume                
        - name: config-generator
          image: "ghcr.io/mavryk-network/mavryk-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: config-generator
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
            - mountPath: /etc/secret-volume
              name: mavryk-accounts                                
        - name: upgrade-storage
          image: "mavrykdynamics/mavryk:v19.3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              if [ ! -e /var/mavryk/node/data/context/store.dict ]
              then
                printf "No store in data dir found, probably initial start, doing nothing."
                exit 0
              fi
              mavkit-node upgrade storage --config /etc/mavryk/config.json
              
          envFrom:
          env:
            - name: DAEMON
              value: upgrade-storage
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
      securityContext:
        fsGroup: 1000            
      volumes:
        - emptyDir: {}
          name: config-volume
        - name: mavryk-accounts
          secret:
            secretName: mavryk-secret
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
---
# Source: mavryk-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: country-town
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 2
  serviceName: country-town
  selector:
    matchLabels:
      node_class: country-town
  template:
    metadata:
      labels:
        appType: mavkit-node
        node_class: country-town
    spec:
      containers:        
        - name: mavkit-node
          image: "mavrykdynamics/mavryk:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              #!/bin/sh
              
              set -xe
              
              # ensure we can run mavkit-client commands without specifying client dir
              ln -s /var/mavryk/client /home/mavryk/.mavryk-client
              #
              # Not every error is fatal on start.  In particular, with zerotier,
              # the listen-addr may not yet be bound causing mavkit-node to fail.
              # So, we try a few times with increasing delays:
              
              for d in 1 1 5 10 20 60 120; do
              	/usr/local/bin/mavkit-node run				\
              			--synchronisation-threshold 0		\
              			--config-file /etc/mavryk/config.json
              	sleep $d
              done
              
              #
              # Keep the container alive for troubleshooting on failures:
              
              sleep 3600
              
          envFrom:
          env:
            - name: DAEMON
              value: mavkit-node
            - name:  MAVRYK_LOG
              value: "* -> DEBUG"
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
          ports:
            - containerPort: 8732
              name: mavryk-rpc
            - containerPort: 9732
              name: mavryk-net
            - containerPort: 9932
              name: metrics
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732
          resources:
            limits:
              memory: 16192Mi
            requests:
              memory: 16192Mi                        
        - name: logger
          image: "ghcr.io/mavryk-network/mavryk-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - logger
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: logger
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume                
        - name: sidecar
          image: "ghcr.io/mavryk-network/mavryk-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: sidecar
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 80Mi                
      initContainers:        
        - name: config-init
          image: "mavrykdynamics/mavryk:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -e
              
              echo "Writing custom configuration for public node"
              mkdir -p /etc/mavryk/data
              
              # if config already exists (container is rebooting), dump and delete it.
              if [ -e /etc/mavryk/data/config.json ]; then
                printf "Found pre-existing config.json:\n"
                cat /etc/mavryk/data/config.json
                printf "Deleting\n"
                rm -rvf /etc/mavryk/data/config.json
              fi
              
              /usr/local/bin/mavkit-node config init		\
                  --config-file /etc/mavryk/data/config.json	\
                  --data-dir /etc/mavryk/data			\
                  --network $CHAIN_NAME
              
              cat /etc/mavryk/data/config.json
              
              printf "\n\n\n\n\n\n\n"
              
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: config-init
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume                
        - name: config-generator
          image: "ghcr.io/mavryk-network/mavryk-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: mavryk-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: config-generator
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
            - mountPath: /etc/secret-volume
              name: mavryk-accounts                                
        - name: upgrade-storage
          image: "mavrykdynamics/mavryk:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              if [ ! -e /var/mavryk/node/data/context/store.dict ]
              then
                printf "No store in data dir found, probably initial start, doing nothing."
                exit 0
              fi
              mavkit-node upgrade storage --config /etc/mavryk/config.json
              
          envFrom:
          env:
            - name: DAEMON
              value: upgrade-storage
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/mavryk
              name: config-volume
            - mountPath: /var/mavryk
              name: var-volume
      securityContext:
        fsGroup: 1000            
      volumes:
        - emptyDir: {}
          name: config-volume
        - name: mavryk-accounts
          secret:
            secretName: mavryk-secret
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
