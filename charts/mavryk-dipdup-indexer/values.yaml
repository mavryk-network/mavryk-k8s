# Change this value to rename the deployed indexer
nameOverride: "mavryk-dipdup-indexer"

# Number of replicas of this indexer
replicaCount: 1

# This key configures the indexer.
# The indexer must be build using dipdup.
# See: https://dipdup.io/
dipdupIndexer:
  # Resource limits and requests for the postgres pod
  resources:
    enabled: true
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi

  # If prometheus is configured on the dipdup instance, this should be enabled
  # Expose the Prometheus metrics returned by the dipdup indexer to the k8s cluster.
  metrics:
    enabled: false
    port: 9090
    # Prometheus Operator is required in your cluster in order to enable
    # serviceMonitor below.
    # ServiceMonitor allows you to scrape the prometheus endpoints of your mavryk dipdup indexer.
    # Make sure the endpoints are active by enabling the metrics as well.
    serviceMonitor:
      enabled: false
      namespace: 'service-monitor-namespace'
      labels:
        # release: my-monitoring-release
      namespaceSelector: {}

  # Enable the sidecar container for indexing readiness
  readiness:
    enabled: true

  # Environment variables to pass to the dipdup indexer
  extraEnv: []

# This key configures postgres.
# An internal or an external db can be connected to the indexer
postgres:
  # Postgres connection info
  host: localhost
  port: 5432
  user: dipdup
  password: "" #if empty, then the value in the secret will be used
  db: dipdup

  # Name of the secret to use to store the Postgres credentials
  # Must contains these keys:
  # - POSTGRES_PASSWORD
  # Exemple:
  # ```
  #   apiVersion: v1
  # stringData:
  #   POSTGRES_PASSWORD: test12345
  # kind: Secret
  # metadata:
  #   name: postgres-secret
  # type: Opaque
  # ```
  # End Secret
  # If the internalDB is enabled, the value of POSTGRES_HOST will be overriden 
  # by the internal db's one.
  postgresSecretName: postgres-secret

  # Environment variables to pass to the postgres database
  extraEnv: []

  # Deploy an internal Postgres instance on another container next to the Indexer
  internalDB:
    enabled: true

    # Configuration override passed as argument of the postgres container
    configOverrides: {}

    # Resource limits and requests for the postgres pod
    resources:
      enabled: true
      requests:
        cpu: 50m
        memory: 128Mi
      limits:
        cpu: 100m
        memory: 256Mi

    # Enable creating PVCs for the db
    persistence:
      enabled: false
      # Size of persistent disk
      size: 1Gi
      # Storage class to be used.
      # If defined, storageClassName: <storageClass>.
      # If set to "-", storageClassName: "", which disables dynamic provisioning.
      # If empty or set to null, no storageClassName spec is
      # set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).
      storageClass: null

    # Enable override the shared memory of the postgres db stored in /dev/shm
    sharedMemoryOverride:
      enabled: false
      sizeLimit: 512MB

hasura:
  enabled: true
  # Name of the secret to use to store the Hasura credentials
  # Must contains these keys:
  # - HASURA_GRAPHQL_ADMIN_SECRET
  # - HASURA_GRAPHQL_DATABASE_URL\
  # Exemple:
  # ```
  #   apiVersion: v1
  # stringData:
  #   HASURA_GRAPHQL_ADMIN_SECRET: test12345
  #   HASURA_GRAPHQL_DATABASE_URL: postgresql://dipdup:test12345@my-postgres.org:5432/dipdup
  # kind: Secret
  # metadata:
  #   name: hasura-secret
  # type: Opaque
  # ```
  # End Secret
  hasuraSecretName: hasura-secret

  # Set to true if the value in the secret should be used instead
  overrideDatabaseUrl: false

  config:
    # Sets dev mode for GraphQL requests, i.e. in case of errors, includes an internal key in the errors extensions of the response.
    # See: https://hasura.io/docs/2.0/deployment/graphql-engine-flags/config-examples/#dev-mode
    devMode: false

    # Enable the Hasura Console (served by the server on / and /console).
    enableConsole: false
    
    # Setting this enables or disables anonymous telemetry.
    # See: https://hasura.io/docs/2.0/policies/telemetry/
    enableTelemetry: false

    # When utilizing live queries, updated results - if any - will be sent, at most, 
    # once during this interval - measured in milliseconds - for any live queries which can be multiplexed.
    # See: https://hasura.io/docs/2.0/subscriptions/observability-and-performance/#parameters
    graphqlLiveQueriesMultiplexedRefetchInterval: 15000

    # Multiplexed live queries are split into batches of the specified size.
    # See: https://hasura.io/docs/2.0/deployment/performance-tuning/#hasura_graphql_live_queries_multiplexed_batch_size
    graphqlLiveQueriesMultiplexedBatchSize: 1000

    # List of domains, including scheme (http/https) and port, to allow for CORS. Wildcard domains are allowed. Setting an empty value will block requests from all other domains.
    # Need to be configured on the ingress as well if enabled with an annotation.
    # Exemple:
    # ```
    # nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    # ```
    corsDomains:
      - '*'
      
  # Environment variables to pass to the hasura api
  extraEnv: []
    
  # Resource limits and requests for the hasura pod
  # See: https://hasura.io/docs/2.0/enterprise/getting-started/start-using-hasura-ee/
  resources:
    enabled: false
    requests:
      memory: 8000Mi
      cpu: 4
    limits:
      memory: 10000Mi
      cpu: 5

  # Ingress configuration of hasura
  ingress:
    # Enable an ingress resource for the hasura API
    enabled: false
    # Ingress hosts
    # Hostname must be provided if Ingress is enabled.
    # Secrets must be manually created in the namespace
    host: ""
    # Additional ingress annotations
    annotations: {}
    # Defines which ingress controller will implement the resource
    className: ""
    # Additional ingress labels
    labels: {}
    # Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix
    # Ingress TLS configuration
    tls: []

pgBouncer:
  enabled: true
  internalPort: 6432
  servicePort: 6432

  deployment:
    readinessProbe:
      enabled: true
      # defaults to the internalPort port
      port:
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    livenessProbe:
      enabled: true
      # defaults to the internalPort port
      port:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3

    # strategy is utilized to configure the desired upgrade approach and
    # configuration for the deployment.  See the Kubernetes documentation
    # related to this subject.
    # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy: {}

  ## Labels to add to the pod metadata
  ##
  podLabels: {}
  # key: value

  ## Annotations to add to the pod metadata
  podAnnotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "9127"
    # prometheus.io/path: "/metrics"

  ###
  ### PgBouncer configuration
  ### - https://www.pgbouncer.org/config.html
  ###
  databases: {}
    # <dbname>:
    #   dbname: foo
    #   host: "dbod-foo.cern.ch"
    #   port: 5432
    #   user: bar
    #   password: xxx
    #   auth_user: pgbouncer
    #   pool_size: 20
    #   min_pool_size: 0
    #   reserve_pool: 0
    #   connect_query:
    #   pool_mode: transaction
    #   max_db_connections: 20
    #   client_encoding: UTF8
    #   datestyle:
    #   timezone: UTC

  ## User specific configuration
  users: {}
    # pool_mode:
    # max_user_connections:

  ## Configuration section
  pgbouncer:
    ### Enabled values are the minimal configuration.

    ##
    ## Administrative settings
    ##

    logfile: /var/log/pgbouncer/pgbouncer.log
    # pidfile: /var/run/pgbouncer/

    ##
    ## Where to wait for clients
    ##

    ## IP address or * which means all IPs
    listen_addr: 0.0.0.0
    listen_port: 6432

    ## unix socket. Set to empty to disable
    unix_socket_dir: ""
    # unix_socket_mode: 0777
    # unix_socket_group:

    ###
    ### TLS settings for accepting clients
    ###

    ## disable, allow, require, verify-ca, verify-full
    # client_tls_sslmode: disable

    ## Path to file that contains trusted CA certs
    # client_tls_ca_file:

    ## Private key and cert to present to clients.
    ## Required for accepting TLS connections from clients.
    # client_tls_key_file:
    # client_tls_cert_file:

    ## fast, normal, secure, legacy, <ciphersuite string>
    # client_tls_ciphers: fast

    ## all, secure, tlsv1.0, tlsv1.1, tlsv1.2, tlsv1.3
    # client_tls_protocols: secure

    ## none, auto, legacy
    # client_tls_dheparams: auto

    ## none, auto, <curve name>
    # client_tls_ecdhcurve: auto

    ###
    ### TLS settings for connecting to backend databases
    ###

    ## disable, allow, require, verify-ca, verify-full
    # server_tls_sslmode: disable

    ## Path to that contains trusted CA certs
    # server_tls_ca_file:

    ## Private key and cert to present to backend.
    ## Needed only if backend server require client cert.
    # server_tls_key_file:
    # server_tls_cert_file:

    ## all, secure, tlsv1.0, tlsv1.1, tlsv1.2, tlsv1.3
    # server_tls_protocols:

    ## fast, normal, secure, legacy, <ciphersuite string>
    # server_tls_ciphers:

    ###
    ### Authentication settings
    ###

    ## cert, md5, scram-sha-256, plain, trust, any, hba, pam
    auth_type: md5
    ## consider adding users under userlist element when this is enabled
    auth_file: /etc/pgbouncer/userlist.txt

    ## Path to HBA-style auth config
    # auth_hba_file:

    ## Query to use to fetch password from database.  Result
    ## must have 2 columns - username and password hash.
    # auth_query: select uname, password FROM pgbouncer.get_auth($1)

    ## Database name in the [database] section to be used for authentication purposes.
    ## This option can be either global or overriden in the connection string if this parameter is specified
    # auth_dbname:

    ## use auth_user with auth_query if user is not present in auth_file
    # auth_user:

    ###
    ### Users allowed into database 'pgbouncer'
    ### (console access control)
    ###

    ## comma-separated list of users who are allowed to change settings
    # admin_users: user2, someadmin, otheradmin

    ## comma-separated list of users who are just allowed to use SHOW command
    # stats_users: stats, root

    ###
    ### Pooler personality questions
    ###

    ## When server connection is released back to pool:
    ##   session      - after client disconnects (default)
    ##   transaction  - after transaction finishes
    ##   statement    - after statement finishes
    pool_mode: transaction

    ## Query for cleaning connection immediately after releasing from
    ## client. No need to put ROLLBACK here, pgbouncer does not reuse
    ## connections where transaction is left open.
    # server_reset_query: DISCARD ALL

    ## Whether server_reset_query should run in all pooling modes. If it
    ## is off, server_reset_query is used only for session-pooling.
    # server_reset_query_always: 0

    ## Comma-separated list of parameters to ignore when given in startup
    ## packet. Newer JDBC versions require the extra_float_digits here.
    # ignore_startup_parameters: extra_float_digits

    ## When taking idle server into use, this query is run first.
    # server_check_query: select 1

    ## If server was used more recently that this many seconds ago,
    ## skip the check query. Value 0 may or may not run in immediately.
    # server_check_delay: 30

    ## Close servers in session pooling mode after a RECONNECT, RELOAD,
    ## etc. when they are idle instead of at the end of the session.
    # server_fast_close: 0

    ## Use <appname - host> as application_name on server.
    # application_name_add_host: 0

    ## Period for updating aggregated stats.
    # stats_period: 60

    ###
    ### Connection limits
    ###

    ## Total number of clients that can connect
    max_client_conn: 100

    ## Default pool size. 20 is good number when transaction pooling
    ## is in use, in session pooling it needs to be the number of
    ## max clients you want to handle at any moment
    default_pool_size: 20

    ## Minimum number of server connections to keep in pool.
    # min_pool_size: 0

    ## How many additional connection to allow in case of trouble
    # reserve_pool_size: 0

    ## If a clients needs to wait more than this many seconds, use reserve pool.
    # reserve_pool_timeout: 5

    ## Maximum number of server connections for a database
    # max_db_connections: 0

    ## Maximum number of server connections for a user
    # max_user_connections: 0

    ## If off, then server connections are reused in LIFO manner
    # server_round_robin: 0

    ###
    ### Logging
    ###

    ## Syslog settings
    # syslog: 0
    # syslog_ident: pgbouncer
    # syslog_facility: daemon

    ## log if client connects or server connection is made
    # log_connections: 1

    ## log if and why connection was closed
    # log_disconnections: 1

    ## log error messages pooler sends to clients
    # log_pooler_errors: 1

    ## write aggregated stats into log
    # log_stats: 1

    ## Logging verbosity.  Same as -v switch on command line.
    # verbose: 0

    ###
    ### Timeouts
    ###

    ## Close server connection if its been connected longer.
    # server_lifetime: 3600

    ## Close server connection if its not been used in this time. Allows
    ## to clean unnecessary connections from pool after peak.
    # server_idle_timeout: 600

    ## Cancel connection attempt if server does not answer takes longer.
    # server_connect_timeout: 15

    ## If server login failed (server_connect_timeout or auth failure)
    ## then wait this many second before trying again.
    # server_login_retry: 15

    ## Dangerous. Server connection is closed if query does not return in
    ## this time. Should be used to survive network problems, _not_ as
    ## statement_timeout. (default: 0)
    # query_timeout: 0

    ## Dangerous. Client connection is closed if the query is not
    ## assigned to a server in this time.  Should be used to limit the
    ## number of queued queries in case of a database or network
    ## failure. (default: 120)
    # query_wait_timeout: 120

    ## Maximum time cancellation requests are allowed to spend waiting for execution.
    ## If the cancel request is not assigned to a server during that time,
    ## the client is disconnected. 0 disables.
    ## If this is disabled, cancel requests will be queued indefinitely. [seconds]
    ## This setting is used to prevent a client locking up when a cancel cannot be forwarded due to the server being down. (default: 10)
    # cancel_wait_timeout: 10

    ## Dangerous. Client connection is closed if no activity in this
    ## time.  Should be used to survive network problems. (default: 0)
    # client_idle_timeout: 0

    ## Disconnect clients who have not managed to log in after connecting
    ## in this many seconds.
    # client_login_timeout: 60

    ##Clean automatically created database entries (via "*") if they stay
    ## unused in this many seconds.
    # autodb_idle_timeout: 3600

    ## Close connections which are in "IDLE in transaction" state longer
    ## than this many seconds.
    # idle_transaction_timeout: 0

    ## How long SUSPEND/-R waits for buffer flush before closing connection.
    # suspend_timeout: 10

    ###
    ### Low-level tuning options
    ###

    ## buffer for streaming packets
    # pkt_buf: 4096

    ## man 2 listen
    # listen_backlog: 128

    ## Max number pkt_buf to process in one event loop.
    # sbuf_loopcnt: 5

    ## Maximum PostgreSQL protocol packet size.
    # max_packet_size: 2147483647

    ## Set SO_REUSEPORT socket option
    # so_reuseport: 0

    ## networking options, for info: man 7 tcp

    ## Linux: Notify program about new connection only if there is also
    ## data received. (Seconds to wait.) On Linux the default is 45, on
    ## other OS'es 0.
    # tcp_defer_accept: 0

    ## In-kernel buffer size (Linux default: 4096)
    # tcp_socket_buffer: 0

    ## whether tcp keepalive should be turned on (0/1)
    # tcp_keepalive: 1

    # The following options are Linux-specific. They also require tcp_keepalive: 1

    ## Count of keepalive packets
    # tcp_keepcnt: 0

    ## How long the connection can be idle before sending keepalive packets
    # tcp_keepidle: 0

    ## The time between individual keepalive probes
    # tcp_keepintvl: 0

    ## How long may transmitted data remain unacknowledged before TCP
    ## connection is closed (in milliseconds)
    # tcp_user_timeout: 0

    ## DNS lookup caching time
    # dns_max_ttl: 15

    ## DNS zone SOA lookup period
    # dns_zone_check_period: 0

    ## DNS negative result caching time
    # dns_nxdomain_ttl: 15

    ## Custom resolv.conf file, to set custom DNS servers or other options
    ## (default: empty = use OS settings)
    # resolv_conf: /etc/pgbouncer/resolv.conf

    ###
    ### Random stuff
    ###

    ## Hackish security feature. Helps against SQL injection: when PQexec
    ## is disabled, multi-statement cannot be made.
    # disable_pqexec: 0

    ## Config file to use for next RELOAD/SIGHUP
    ## By default contains config file from command line.
    # conffile:

    ## Windows service name to register as. job_name is alias for
    ## service_name, used by some Skytools scripts.
    # service_name: pgbouncer
    # job_name: pgbouncer

  ###
  ### Include directive
  ###
  ## Read additional config from other file
  # include: /etc/pgbouncer.d/extra-pgbouncer.ini

  # User list secret override
  # Fill if you want to override the secret containing the user list
  userListSecretName: ""

  # Authentication file format
  userlist: {}
    ###! list of users to connect to database, You can get by running this query
    ###! psql -Atq -U postgres -d postgres -c "SELECT concat('\"', usename, '\" \"', passwd, '\"') FROM pg_shadow;"

    # username1: "password"
    # username2: "md5abcdef012342345"
    # username3: "SCRAM-SHA-256$<iterations>:<salt>$<storedkey>:<serverkey>"

  ## Additional volumeMounts to the main container
  ##
  extraVolumeMounts: []
  # - name: pgbouncer-pid
  #   mountPath: "/var/run/pgbouncer/"

  ###
  ### PgBouncer Exporter container image and configuration
  ###
  ### When enabling, make sure to update podAnnotations: {} accordingly
  pgbouncerExporter:
    enabled: true
    port: 9127
    log:
      level: info # or debug, warn, error
      format: json # or json
    resources:
      limits:
        cpu: 250m
        memory: 150Mi
      requests:
        cpu: 30m
        memory: 40Mi
    extraEnv: []
    # - name: PGBOUNCER_USER
    #   value: bar
    # - name: PGBOUNCER_PWD
    #   value: bar
    # - name: PGBOUNCER_PORT
    #   value: bar
    extraEnvFrom: []
    # - name: foo
    #   valueFrom:

# Images used for the indexer goes here
images:
  imagePullSecrets: []
  dipdupIndexer:
    registry: ""
    repository: ""
    tag: ""
    imagePullPolicy: Always
  postgres:
    registry: docker.io
    repository: timescale/timescaledb
    tag: latest-pg15
    imagePullPolicy: IfNotPresent
  hasura:
    registry: docker.io
    repository: hasura/graphql-engine
    tag: v2.44.0
    imagePullPolicy: IfNotPresent
  pgBouncer:
    registry: registry.cern.ch
    repository: pgbouncer/pgbouncer
    tag: 1.19.1
    imagePullPolicy: IfNotPresent
  pgBouncerExporter:
    registry: docker.io
    repository: prometheuscommunity/pgbouncer-exporter
    tag: v0.6.0
    imagePullPolicy: IfNotPresent
