---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mavryk-indexer
  labels:
    app: mavryk-indexer
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: mavryk-indexer
  selector:
    matchLabels:
      app: mavryk-indexer
  template:
    metadata:
      labels:
        app: mavryk-indexer
    spec:
      {{- if or (.Values.images.dipdupIndexer.imagePullSecret) (.Values.images.postgres.imagePullSecret) }}
      imagePullSecrets:
      {{- if .Values.images.dipdupIndexer.imagePullSecret }}
          - name: '{{ .Values.images.dipdupIndexer.imagePullSecret }}'
      {{- end }}
      {{- if .Values.images.postgres.imagePullSecret }}
          - name: '{{ .Values.images.postgres.imagePullSecret }}'
      {{- end }}
      {{- end }}
      containers:
        - name: mavryk-indexer
          {{- if .Values.dipdupIndexer.resources.enabled }}
          resources:
            requests:
              memory: '{{ .Values.dipdupIndexer.resources.requests.memory }}'
              cpu: '{{ .Values.dipdupIndexer.resources.requests.cpu }}'
            limits:
              memory: '{{ .Values.dipdupIndexer.resources.limits.memory }}'
              cpu: '{{ .Values.dipdupIndexer.resources.limits.cpu }}'
          {{- end }}
          env:
          {{- if .Values.hasura.enabled }}
          - name: HASURA_URL
            value: http://hasura.{{ .Release.Namespace }}.svc.cluster.local:8080
          - name: ADMIN_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.hasura.hasuraSecretName }}
                key: HASURA_GRAPHQL_ADMIN_SECRET
          {{- end }}
          {{- if .Values.postgres.internalDB.enabled }}
          - name: POSTGRES_HOST
            value: mavryk-indexer-db.{{ .Release.Namespace }}.svc.cluster.local
          {{- else }}
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_HOST
          {{- end }}
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_DB
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_PORT
          - name: POSTGRES_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_USERNAME
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_USERNAME
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_PASSWORD
          {{- range .Values.dipdupIndexer.extraEnv }}
          - name: {{ .name }}
            {{- if ((.value))}}
            value: "{{.value}}"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- end }}
          {{- end }}
          image: '{{ .Values.images.dipdupIndexer.registry }}/{{ .Values.images.dipdupIndexer.repository }}:{{ .Values.images.dipdupIndexer.tag }}'
          imagePullPolicy: '{{ .Values.images.dipdupIndexer.imagePullPolicy }}'
          {{- if .Values.dipdupIndexer.metrics.enabled }}
          ports:
            - name: metrics
              containerPort: {{ .Values.dipdupIndexer.metrics.port }}
              protocol: TCP
          {{- end }}
        - name: db
          {{- if .Values.postgres.internalDB.resources.enabled }}
          resources:
            requests:
              memory: '{{ .Values.postgres.internalDB.resources.requests.memory }}'
              cpu: '{{ .Values.postgres.internalDB.resources.requests.cpu }}'
            limits:
              memory: '{{ .Values.postgres.internalDB.resources.limits.memory }}'
              cpu: '{{ .Values.postgres.internalDB.resources.limits.cpu }}'
          {{- end }}
          env:
          - name: PGDATA
            value: /var/lib/postgres/data
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_DB
          - name: POSTGRES_HOST
            value: mavryk-indexer-db.{{ .Release.Namespace }}.svc.cluster.local
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_PORT
          - name: POSTGRES_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_USERNAME
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_USERNAME
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_PASSWORD
          {{- range .Values.postgres.extraEnv }}
          - name: {{ .name }}
            {{- if ((.value))}}
            value: "{{.value}}"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- end }}
          {{- end }}
          image: '{{ .Values.images.postgres.registry }}/{{ .Values.images.postgres.repository }}:{{ .Values.images.postgres.tag }}'
          imagePullPolicy: '{{ .Values.images.postgres.imagePullPolicy }}'
          ports:
            - name: db
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: indexer-db-storage
              mountPath: /var/lib/postgres
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
          command: ["/bin/sh", "-c"]
          args:
            - |
              chmod +x /docker-entrypoint-initdb.d/*.sh
              /usr/local/bin/docker-entrypoint.sh postgres
        - name: postgres-config
          image: '{{ .Values.images.postgres.registry }}/{{ .Values.images.postgres.repository }}:{{ .Values.images.postgres.tag }}'
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/sh
              set -e
              
              # Wait for PostgreSQL to be ready
              until pg_isready -p 5432; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 1
              done
              
              # Update PostgreSQL configuration
              CONF_FILE="$PGDATA/postgresql.conf"
              
              # Connection settings
              sed -i 's/^max_connections.*/max_connections = {{- .Values.postgres.internalDB.maxConnections }}/' "$CONF_FILE"
              sed -i 's/^work_mem.*/work_mem = {{- .Values.postgres.internalDB.workMem }}/' "$CONF_FILE"
              
              # Memory allocation
              sed -i 's/^shared_buffers.*/shared_buffers = {{- .Values.postgres.internalDB.sharedBuffers }}/' "$CONF_FILE"
              sed -i 's/^maintenance_work_mem.*/maintenance_work_mem = {{- .Values.postgres.internalDB.maintenanceWorkMem }}/' "$CONF_FILE"
              sed -i 's/^effective_cache_size.*/effective_cache_size = {{- .Values.postgres.internalDB.effectiveCacheSize }}/' "$CONF_FILE"
              
              # CPU utilization
              sed -i 's/^max_worker_processes.*/max_worker_processes = {{- .Values.postgres.internalDB.maxWorkerProcesses }}/' "$CONF_FILE"
              sed -i 's/^max_parallel_workers.*/max_parallel_workers = {{- .Values.postgres.internalDB.maxParallelWorker }}/' "$CONF_FILE"
              sed -i 's/^max_parallel_workers_per_gather.*/max_parallel_workers_per_gather = {{- .Values.postgres.internalDB.maxParallelWorkerPerGather }}/' "$CONF_FILE"
              
              # Write performance
              sed -i 's/^wal_buffers.*/wal_buffers = {{- .Values.postgres.internalDB.walBuffers }}/' "$CONF_FILE"
              sed -i 's/^checkpoint_completion_target.*/checkpoint_completion_target = {{- .Values.postgres.internalDB.checkpointCompletionTarget }}/' "$CONF_FILE"
              sed -i 's/^random_page_cost.*/random_page_cost = {{- .Values.postgres.internalDB.randomPageCost }}/' "$CONF_FILE"
              
              # Connection settings with pgbouncer
              sed -i 's/^idle_in_transaction_session_timeout.*/idle_in_transaction_session_timeout = {{- .Values.postgres.internalDB.idleInTransactionSessionsTimeout }}/' "$CONF_FILE"
              sed -i 's/^statement_timeout.*/statement_timeout = {{- .Values.postgres.internalDB.statementTimeout }}/' "$CONF_FILE"
              
              # TimescaleDB specific
              sed -i 's/^timescaledb.max_background_workers.*/timescaledb.max_background_workers = {{- .Values.postgres.internalDB.timescaleDBmaxBackgroundWorkers }}/' "$CONF_FILE"
              sed -i 's/^timescaledb.max_insert_batch_size.*/timescaledb.max_insert_batch_size = {{- .Values.postgres.internalDB.timescaleDBMaxInsetBatchSize }}/' "$CONF_FILE"
              
              # Reload PostgreSQL configuration
              pg_ctl reload -D "$PGDATA"
              
              # Keep the container running
              tail -f /dev/null
          env:
          - name: PGDATA
            value: /var/lib/postgres/data
          volumeMounts:
            - name: indexer-db-storage
              mountPath: /var/lib/postgres
      volumes:
      - name: indexer-db-storage
        {{- if .Values.postgres.internalDB.persistence.enabled }}
        persistentVolumeClaim:
          claimName: indexer-db-storage-mavryk-indexer-0
        {{- else }}
        emptyDir: {}
        {{- end }}
