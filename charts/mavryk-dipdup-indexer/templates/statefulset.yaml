---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "indexer.fullname" . }}
  labels:
    app: {{ include "indexer.fullname" . }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "indexer.fullname" . }}
  selector:
    matchLabels:
      app: {{ include "indexer.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "indexer.fullname" . }}
    spec:
      {{- with .Values.images.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.postgres.internalDB.enabled }}
      initContainers:
        - command:
          - sh
          - -c
          - |
            CONF_FILE="/var/lib/postgres/data/postgresql.conf"
            
            # Original settings
            sed -i 's/^max_connections.*/max_connections = {{- .Values.postgres.internalDB.maxConnections }}/' "$CONF_FILE"
            grep -q "^max_connections" "$CONF_FILE" || echo "max_connections = {{- .Values.postgres.internalDB.maxConnections }}" >> "$CONF_FILE"
            sed -i 's/^work_mem.*/work_mem = {{- .Values.postgres.internalDB.workMem }}/' "$CONF_FILE"
            grep -q "^work_mem" "$CONF_FILE" || echo "work_mem = {{- .Values.postgres.internalDB.workMem }}" >> "$CONF_FILE"
            
            # Memory allocation
            sed -i 's/^shared_buffers.*/shared_buffers = {{- .Values.postgres.internalDB.sharedBuffers }}/' "$CONF_FILE"
            grep -q "^shared_buffers" "$CONF_FILE" || echo "shared_buffers = {{- .Values.postgres.internalDB.sharedBuffers }}" >> "$CONF_FILE"
            sed -i 's/^maintenance_work_mem.*/maintenance_work_mem = {{- .Values.postgres.internalDB.maintenanceWorkMem }}/' "$CONF_FILE"
            grep -q "^maintenance_work_mem" "$CONF_FILE" || echo "maintenance_work_mem = {{- .Values.postgres.internalDB.maintenanceWorkMem }}" >> "$CONF_FILE"
            sed -i 's/^effective_cache_size.*/effective_cache_size = {{- .Values.postgres.internalDB.effectiveCacheSize }}/' "$CONF_FILE"
            grep -q "^effective_cache_size" "$CONF_FILE" || echo "effective_cache_size = {{- .Values.postgres.internalDB.effectiveCacheSize }}" >> "$CONF_FILE"
            
            # CPU utilization
            sed -i 's/^max_worker_processes.*/max_worker_processes = {{- .Values.postgres.internalDB.maxWorkerProcesses }}/' "$CONF_FILE"
            grep -q "^max_worker_processes" "$CONF_FILE" || echo "max_worker_processes = {{- .Values.postgres.internalDB.maxWorkerProcesses }}" >> "$CONF_FILE"
            sed -i 's/^max_parallel_workers.*/max_parallel_workers = {{- .Values.postgres.internalDB.maxParallelWorker }}/' "$CONF_FILE"
            grep -q "^max_parallel_workers" "$CONF_FILE" || echo "max_parallel_workers = {{- .Values.postgres.internalDB.maxParallelWorker }}" >> "$CONF_FILE"
            sed -i 's/^max_parallel_workers_per_gather.*/max_parallel_workers_per_gather = {{- .Values.postgres.internalDB.maxParallelWorkerPerGather }}/' "$CONF_FILE"
            grep -q "^max_parallel_workers_per_gather" "$CONF_FILE" || echo "max_parallel_workers_per_gather = {{- .Values.postgres.internalDB.maxParallelWorkerPerGather }}" >> "$CONF_FILE"
            
            # Write performance
            sed -i 's/^wal_buffers.*/wal_buffers = {{- .Values.postgres.internalDB.walBuffers }}/' "$CONF_FILE"
            grep -q "^wal_buffers" "$CONF_FILE" || echo "wal_buffers = {{- .Values.postgres.internalDB.walBuffers }}" >> "$CONF_FILE"
            sed -i 's/^checkpoint_completion_target.*/checkpoint_completion_target = {{- .Values.postgres.internalDB.checkpointCompletionTarget }}/' "$CONF_FILE"
            grep -q "^checkpoint_completion_target" "$CONF_FILE" || echo "checkpoint_completion_target = {{- .Values.postgres.internalDB.checkpointCompletionTarget }}" >> "$CONF_FILE"
            sed -i 's/^random_page_cost.*/random_page_cost = {{- .Values.postgres.internalDB.randomPageCost }}/' "$CONF_FILE"
            grep -q "^random_page_cost" "$CONF_FILE" || echo "random_page_cost = {{- .Values.postgres.internalDB.randomPageCost }}" >> "$CONF_FILE"
            
            # Connection settings with pgbouncer
            sed -i 's/^idle_in_transaction_session_timeout.*/idle_in_transaction_session_timeout = {{- .Values.postgres.internalDB.idleInTransactionSessionsTimeout }}/' "$CONF_FILE"
            grep -q "^idle_in_transaction_session_timeout" "$CONF_FILE" || echo "idle_in_transaction_session_timeout = {{- .Values.postgres.internalDB.idleInTransactionSessionsTimeout }}" >> "$CONF_FILE"
            sed -i 's/^statement_timeout.*/statement_timeout = {{- .Values.postgres.internalDB.statementTimeout }}/' "$CONF_FILE"
            grep -q "^statement_timeout" "$CONF_FILE" || echo "statement_timeout = {{- .Values.postgres.internalDB.statementTimeout }}" >> "$CONF_FILE"
            
            # TimescaleDB specific
            sed -i 's/^timescaledb.max_background_workers.*/timescaledb.max_background_workers = {{- .Values.postgres.internalDB.timescaleDBmaxBackgroundWorkers }}/' "$CONF_FILE"
            grep -q "^timescaledb.max_background_workers" "$CONF_FILE" || echo "timescaledb.max_background_workers = {{- .Values.postgres.internalDB.timescaleDBmaxBackgroundWorkers }}" >> "$CONF_FILE"
            sed -i 's/^timescaledb.max_insert_batch_size.*/timescaledb.max_insert_batch_size = {{- .Values.postgres.internalDB.timescaleDBMaxInsetBatchSize }}/' "$CONF_FILE"
            grep -q "^timescaledb.max_insert_batch_size" "$CONF_FILE" || echo "timescaledb.max_insert_batch_size = {{- .Values.postgres.internalDB.timescaleDBMaxInsetBatchSize }}" >> "$CONF_FILE"
          image: busybox
          imagePullPolicy: Always
          name: init-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/postgres
            name: indexer-db-storage
      {{- end }}
      containers:
        - name: mavryk-indexer
          {{- if .Values.dipdupIndexer.resources.enabled }}
          resources:
            requests:
              memory: '{{ .Values.dipdupIndexer.resources.requests.memory }}'
              cpu: '{{ .Values.dipdupIndexer.resources.requests.cpu }}'
            limits:
              memory: '{{ .Values.dipdupIndexer.resources.limits.memory }}'
              cpu: '{{ .Values.dipdupIndexer.resources.limits.cpu }}'
          {{- end }}
          env:
          {{- if .Values.hasura.enabled }}
          - name: HASURA_URL
            value: 'http://localhost:8080'
          - name: ADMIN_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.hasura.hasuraSecretName }}
                key: HASURA_GRAPHQL_ADMIN_SECRET
          {{- end }}
          {{- if .Values.postgres.internalDB.enabled }}
          - name: POSTGRES_HOST
            value: 'localhost'
          {{- else }}
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_HOST
          {{- end }}
          - name: POSTGRES_DB
            value: '{{ .Values.postgres.db }}'
          {{- if .Values.pgBouncer.enabled }}
          - name: POSTGRES_PORT
            value: '{{ .Values.pgBouncer.internalPort }}'
          {{- else }}
          - name: POSTGRES_PORT
            value: '{{ .Values.postgres.port }}'
          {{- end }}
          - name: POSTGRES_USERNAME
            value: '{{ .Values.postgres.user }}'
          - name: POSTGRES_USER
            value: '{{ .Values.postgres.user }}'
          {{- if eq .Values.postgres.password "" }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_PASSWORD
          {{- else }}
          - name: POSTGRES_PASSWORD
            value: "{{ .Values.postgres.password }}"
          {{- end }}
          {{- range .Values.dipdupIndexer.extraEnv }}
          - name: {{ .name }}
            {{- if ((.value))}}
            value: "{{.value}}"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- end }}
          {{- end }}
          image: '{{ .Values.images.dipdupIndexer.registry }}/{{ .Values.images.dipdupIndexer.repository }}:{{ .Values.images.dipdupIndexer.tag }}'
          imagePullPolicy: '{{ .Values.images.dipdupIndexer.imagePullPolicy }}'
          {{- if .Values.dipdupIndexer.metrics.enabled }}
          ports:
            - name: metrics
              containerPort: {{ .Values.dipdupIndexer.metrics.port }}
              protocol: TCP
          {{- end }}
{{- if .Values.hasura.enabled }}
        - name: hasura
          {{- if .Values.hasura.resources.enabled }}
          resources:
            requests:
              memory: '{{ .Values.hasura.resources.requests.memory }}'
              cpu: '{{ .Values.hasura.resources.requests.cpu }}'
            limits:
              memory: '{{ .Values.hasura.resources.limits.memory }}'
              cpu: '{{ .Values.hasura.resources.limits.cpu }}'
          {{- end }}
          env:
            - name: HASURA_GRAPHQL_ENABLE_TELEMETRY
              value: '{{ .Values.hasura.config.enableTelemetry }}'
            - name: HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL
              value: '{{ .Values.hasura.config.graphqlLiveQueriesMultiplexedRefetchInterval }}'
            - name: HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_BATCH_SIZE
              value: '{{ .Values.hasura.config.graphqlLiveQueriesMultiplexedBatchSize }}'
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: '{{ .Values.hasura.config.enableConsole }}'
            - name: HASURA_GRAPHQL_DEV_MODE
              value: '{{ .Values.hasura.config.devMode }}'
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: startup, http-log, webhook-log, websocket-log, query-log
            - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
              value: '{{ .Values.hasura.config.unauthorizedRole }}'
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: '{{ .Values.hasura.hasuraSecretName }}'
                  key: HASURA_GRAPHQL_ADMIN_SECRET
            - name: HASURA_GRAPHQL_CORS_DOMAIN
              value: '{{ include "listToCSV" .Values.hasura.config.corsDomains }}'
          {{- if .Values.hasura.overrideDatabaseUrl }}
            - name: HASURA_GRAPHQL_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: '{{ .Values.hasura.hasuraSecretName }}'
                  key: HASURA_GRAPHQL_DATABASE_URL
          {{- else }}
            - name: HASURA_GRAPHQL_DATABASE_URL
              value: {{ include "indexer.hasuraGraphqlDatabaseUrl" . }}
          {{- end }}
          {{- range .Values.hasura.extraEnv }}
            - name: {{ .name }}
              {{- if ((.value))}}
              value: "{{.value}}"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .valueFrom.secretKeyRef.name }}
                  key: {{ .valueFrom.secretKeyRef.key }}
              {{- end }}
          {{- end }}
          image: '{{ .Values.images.hasura.registry }}/{{ .Values.images.hasura.repository }}:{{ .Values.images.hasura.tag }}'
          imagePullPolicy: '{{ .Values.images.hasura.imagePullPolicy }}'
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
{{- end }}
{{- if .Values.pgBouncer.enabled }}
        - name: pgbouncer
          image: '{{ .Values.images.pgBouncer.registry }}/{{ .Values.images.pgBouncer.repository }}:{{ .Values.images.pgBouncer.tag }}'
          imagePullPolicy: '{{ .Values.images.pgBouncer.imagePullPolicy }}'
          ports:
            - name: pgbouncer
              containerPort: {{ .Values.pgBouncer.internalPort }}
          {{- if .Values.pgBouncer.deployment.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.pgBouncer.internalPort }}
            initialDelaySeconds: {{ .Values.pgBouncer.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.pgBouncer.deployment.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.pgBouncer.deployment.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.pgBouncer.deployment.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.pgBouncer.deployment.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.pgBouncer.deployment.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.pgBouncer.internalPort }}
            initialDelaySeconds: {{ .Values.pgBouncer.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.pgBouncer.deployment.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.pgBouncer.deployment.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.pgBouncer.deployment.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.pgBouncer.deployment.livenessProbe.failureThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                # So termination grace period is handling by terminationGracePeriodSeconds
                command: ["/bin/sh", "-c", "killall -INT pgbouncer && sleep infinity"]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ['all']
          volumeMounts:
            - name: config
              mountPath: /etc/pgbouncer
              readOnly: true
            {{- if .Values.pgBouncer.extraVolumeMounts -}}
            {{ toYaml .Values.pgBouncer.extraVolumeMounts | nindent 12 }}
            {{- end }}
          {{- if .Values.pgBouncer.resources }}
          resources:
            {{- toYaml .Values.pgBouncer.resources | nindent 12 }}
          {{- end }}
        {{- if .Values.pgBouncer.pgbouncerExporter.enabled }}
        - name: exporter
          image: '{{ .Values.images.pgBouncerExporter.registry }}/{{ .Values.images.pgBouncerExporter.repository }}:{{ .Values.images.pgBouncerExporter.tag }}'
          imagePullPolicy: '{{ .Values.images.pgBouncerExporter.imagePullPolicy }}'
          args:
          - --web.listen-address=:{{ .Values.pgBouncer.pgbouncerExporter.port }}
          - --web.telemetry-path=/metrics
          - --log.level={{ .Values.pgBouncer.pgbouncerExporter.log.level }}
          - --log.format={{ .Values.pgBouncer.pgbouncerExporter.log.format }}
          - --pgBouncer.connectionString=postgres://$(PGBOUNCER_USER):$(PGBOUNCER_PWD)@localhost:$(PGBOUNCER_PORT)/pgbouncer?sslmode=disable&connect_timeout=10
          env:
            {{- if .Values.pgBouncer.pgbouncerExporter.extraEnvFrom }}
            {{- toYaml .Values.pgBouncer.pgbouncerExporter.extraEnvFrom | nindent 12 }}
            {{- end }}
            {{- if .Values.pgBouncer.pgbouncerExporter.extraEnv }}
            {{- toYaml .Values.pgBouncer.pgbouncerExporter.extraEnv | nindent 12 }}
            {{- end }}
          {{- if .Values.pgBouncer.pgbouncerExporter.resources }}
          resources:
          {{- toYaml .Values.pgBouncer.pgbouncerExporter.resources | nindent 12 }}
          {{- end }}
          ports:
          - name: http-metrics-pg
            containerPort: {{ .Values.pgBouncer.pgbouncerExporter.port }}
            protocol: TCP
        {{- end }}
{{- end }}
{{- if .Values.postgres.internalDB.enabled }}
        - name: db
          {{- if .Values.postgres.internalDB.resources.enabled }}
          resources:
            requests:
              memory: '{{ .Values.postgres.internalDB.resources.requests.memory }}'
              cpu: '{{ .Values.postgres.internalDB.resources.requests.cpu }}'
            limits:
              memory: '{{ .Values.postgres.internalDB.resources.limits.memory }}'
              cpu: '{{ .Values.postgres.internalDB.resources.limits.cpu }}'
          {{- end }}
          env:
          - name: PGDATA
            value: '/var/lib/postgres/data'
          - name: POSTGRES_DB
            value: '{{ .Values.postgres.db }}'
          - name: POSTGRES_HOST
            value: 'localhost'
          - name: POSTGRES_PORT
            value: '{{ .Values.postgres.port }}'
          - name: POSTGRES_USERNAME
            value: '{{ .Values.postgres.user }}'
          - name: POSTGRES_USER
            value: '{{ .Values.postgres.user }}'
          {{- if eq .Values.postgres.password "" }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgres.postgresSecretName }}
                key: POSTGRES_PASSWORD
          {{- else }}
          - name: POSTGRES_PASSWORD
            value: '{{ .Values.postgres.password }}'
          {{- end }}
          {{- range .Values.postgres.extraEnv }}
          - name: {{ .name }}
            {{- if ((.value))}}
            value: "{{.value}}"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name }}
                key: {{ .valueFrom.secretKeyRef.key }}
            {{- end }}
          {{- end }}
          image: '{{ .Values.images.postgres.registry }}/{{ .Values.images.postgres.repository }}:{{ .Values.images.postgres.tag }}'
          imagePullPolicy: '{{ .Values.images.postgres.imagePullPolicy }}'
          ports:
            - name: db
              containerPort: {{ .Values.postgres.port }}
              protocol: TCP
          volumeMounts:
            - name: indexer-db-storage
              mountPath: /var/lib/postgres
{{- if .Values.postgres.internalDB.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: indexer-db-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.postgres.internalDB.persistence.storageClass }}
        storageClassName: {{ .Values.postgres.internalDB.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.postgres.internalDB.persistence.size }}
{{- end }}
{{- if or .Values.pgBouncer.enabled (not .Values.postgres.internalDB.persistence.enabled) }}
      volumes:
{{- if not .Values.postgres.internalDB.persistence.enabled }}
      - name: indexer-db-storage
        emptyDir: {}
{{- end }}
{{- if .Values.pgBouncer.enabled }}
      - name: config
        projected:
          sources:
            - configMap:          
                name: {{ include "indexer.configFile" . }}
    {{- if .Values.userlist }}
            - secret:
                name: {{ include "indexer.userlistFile" . }}
    {{- end }}
{{- end }}
{{- end }}
{{- end }}
