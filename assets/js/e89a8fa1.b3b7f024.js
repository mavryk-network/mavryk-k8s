"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[753],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),k=r,d=m["".concat(u,".").concat(k)]||m[k]||p[k]||o;return n?a.createElement(d,l(l({ref:t},c),{},{components:n})):a.createElement(d,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9337:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={},u="Creating a Private Blockchain",s={unversionedId:"Private-Chain",id:"Private-Chain",title:"Creating a Private Blockchain",description:"Zerotier",source:"@site/Private-Chain.md",sourceDirName:".",slug:"/Private-Chain",permalink:"/Private-Chain",tags:[],version:"current",frontMatter:{},sidebar:"mavrykK8sSidebar",previous:{title:"Public network node",permalink:"/Public-Node"},next:{title:"Indexers",permalink:"/Indexers"}},c={},p=[{value:"Zerotier",id:"zerotier",level:2},{value:"mkmavrykchain",id:"mkmavrykchain",level:2},{value:"Start your private chain",id:"start-your-private-chain",level:2},{value:"Adding nodes within the cluster",id:"adding-nodes-within-the-cluster",level:2},{value:"Adding external nodes to the cluster",id:"adding-external-nodes-to-the-cluster",level:2},{value:"On the computer of the joining node",id:"on-the-computer-of-the-joining-node",level:3}],m={toc:p};function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-a-private-blockchain"},"Creating a Private Blockchain"),(0,o.kt)("h2",{id:"zerotier"},"Zerotier"),(0,o.kt)("p",null,"Zerotier is a VPN service that the Mavryk nodes in your cluster will use to communicate with each other."),(0,o.kt)("p",null,"Create a ZeroTier network:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go to ",(0,o.kt)("a",{parentName:"li",href:"https://my.zerotier.com"},"https://my.zerotier.com")),(0,o.kt)("li",{parentName:"ul"},"Login with credentials or create a new account"),(0,o.kt)("li",{parentName:"ul"},"Go to ",(0,o.kt)("a",{parentName:"li",href:"https://my.zerotier.com/account"},"https://my.zerotier.com/account")," to create a new API access token"),(0,o.kt)("li",{parentName:"ul"},"Under ",(0,o.kt)("inlineCode",{parentName:"li"},"API Access Tokens > New Token"),', give a name to your access token and generate it by clicking on the "generate" button. Save the generated access token, e.g. ',(0,o.kt)("inlineCode",{parentName:"li"},"yEflQt726fjXuSUyQ73WqXvAFoijXkLt")," on your computer."),(0,o.kt)("li",{parentName:"ul"},"Go to ",(0,o.kt)("a",{parentName:"li",href:"https://my.zerotier.com/network"},"https://my.zerotier.com/network")),(0,o.kt)("li",{parentName:"ul"},'Create a new network by clicking on the "Create a Network"\nbutton. Save the 16 character generated network\nid, e.g. ',(0,o.kt)("inlineCode",{parentName:"li"},"1c33c1ced02a5eee")," on your computer.")),(0,o.kt)("p",null,"Set Zerotier environment variables in order to access the network id and access token values with later commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export ZT_TOKEN=yEflQt726fjXuSUyQ73WqXvAFoijXkLt\nexport ZT_NET=1c33c1ced02a5eee\n")),(0,o.kt)("h2",{id:"mkmavrykchain"},"mkmavrykchain"),(0,o.kt)("p",null,"mkmavrykchain is a python script that generates Helm values, which Helm then uses to create your Mavryk chain on k8s."),(0,o.kt)("p",null,"Follow ",(0,o.kt)("em",{parentName:"p"},"just")," the Install mkmavrykchain step in ",(0,o.kt)("inlineCode",{parentName:"p"},"./mkmavrykchain/README.md"),". See there for more info on how you can customize your chain."),(0,o.kt)("p",null,"Set as an environment variable the name you would like to give to your chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export CHAIN_NAME=my-chain\n")),(0,o.kt)("p",null,"NOTE: k8s will throw an error when deploying if your chain name format does not match certain requirements. From k8s: ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS-1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')")),(0,o.kt)("p",null,"Set ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3.6/using/cmdline.html#envvar-PYTHONUNBUFFERED"},"unbuffered IO")," for python:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export PYTHONUNBUFFERED=x\n")),(0,o.kt)("h2",{id:"start-your-private-chain"},"Start your private chain"),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"mkmavrykchain")," to create your Helm values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkmavrykchain $CHAIN_NAME --zerotier-network $ZT_NET --zerotier-token $ZT_TOKEN\n")),(0,o.kt)("p",null,"This will create two files:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"./${CHAIN_NAME}_values.yaml")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"./${CHAIN_NAME}_invite_values.yaml"))),(0,o.kt)("p",null,"The former is what you will use to create your chain, and the latter is for invitees to join your chain."),(0,o.kt)("p",null,"Create a Helm release that will start your chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"helm install $CHAIN_NAME mavryk-network/mavryk-chain \\\n--values ./${CHAIN_NAME}_values.yaml \\\n--namespace mavryk-network --create-namespace\n")),(0,o.kt)("p",null,"Your kubernetes cluster will now be running a series of jobs to\nperform the following tasks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"get a zerotier ip"),(0,o.kt)("li",{parentName:"ul"},"generate a node identity"),(0,o.kt)("li",{parentName:"ul"},"create a baker account"),(0,o.kt)("li",{parentName:"ul"},"generate a genesis block for your chain"),(0,o.kt)("li",{parentName:"ul"},"start the bootstrap-node baker to bake/validate the chain"),(0,o.kt)("li",{parentName:"ul"},"activate the protocol"),(0,o.kt)("li",{parentName:"ul"},"bake the first block")),(0,o.kt)("p",null,"You can find your node in the mavryk-network namespace with some status information using kubectl."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl -n mavryk-network get pods -l appType=mavkit-node\n")),(0,o.kt)("p",null,"You can view (and follow using the ",(0,o.kt)("inlineCode",{parentName:"p"},"-f")," flag) logs for your node using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl -n mavryk-network logs -l appType=mavkit-node -c mavkit-node -f --prefix\n")),(0,o.kt)("p",null,"Congratulations! You now have an operational Mavryk based permissioned\nchain running one node."),(0,o.kt)("h2",{id:"adding-nodes-within-the-cluster"},"Adding nodes within the cluster"),(0,o.kt)("p",null,"You can spin up a number of regular peer nodes that don't bake in your cluster by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"--number-of-nodes N")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"mkmavrykchain"),". Pass this along with your previously used flags (",(0,o.kt)("inlineCode",{parentName:"p"},"--zerotier-network")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"--zerotier-token"),"). You can use this to both scale up and down."),(0,o.kt)("p",null,"Or if you previously spun up the chain using ",(0,o.kt)("inlineCode",{parentName:"p"},"mkmavrykchain"),', you may adjust\nyour setup to an arbitrary number of nodes by updating the "nodes"\nsection in the values yaml file.'),(0,o.kt)("p",null,"nodes is a dictionary where each key value pair defines a statefulset\nand a number of instances thereof.  The name (key) defines the name of\nthe statefulset and will be the base of the pod names.  The name must be\nDNS compliant or you will get odd errors.  The instances are defined as a\nlist because their names are simply ",(0,o.kt)("inlineCode",{parentName:"p"},"-N")," appended to the statefulsetname.\nSaid names are traditionally kebab case."),(0,o.kt)("p",null,"At the statefulset level, the following parameters are allowed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"storage_size: the size of the PV"),(0,o.kt)("li",{parentName:"ul"},'runs: a list of containers to run, e.g. "baker", "accuser"'),(0,o.kt)("li",{parentName:"ul"},"instances: a list of nodes to fire up, each is a dictionary\ndefining:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bake_using_account"),": The name of the account that should be used\nfor baking."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"is_bootstrap_node"),": Is this node a bootstrap peer."),(0,o.kt)("li",{parentName:"ul"},"config: The ",(0,o.kt)("inlineCode",{parentName:"li"},"config")," property should mimic the structure\nof a node's config.json.\nRun ",(0,o.kt)("inlineCode",{parentName:"li"},"mavryk-node config --help")," for more info.")))),(0,o.kt)("p",null,"defaults are filled in for most values."),(0,o.kt)("p",null,"E.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nodes:\n  baking-node:\n    storage_size: 15Gi\n    runs:\n      - baker\n      - logger\n    instances:\n      - bake_using_account: baker0\n        is_bootstrap_node: true\n        config:\n          shell:\n            history_mode: rolling\n  full-node:\n    instances:\n      - {}\n      - {}\n")),(0,o.kt)("p",null,"This will run the following nodes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"baking-node-0")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"full-node-0")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"full-node-1"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"baking-node-0")," will run baker and logger containers\nand will be the only bootstrap node.  ",(0,o.kt)("inlineCode",{parentName:"p"},"full-node-*")," are just nodes\nwith no extras. "),(0,o.kt)("p",null,"To upgrade your Helm release run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"helm upgrade $CHAIN_NAME mavryk-network/mavryk-chain \\\n--values ./${CHAIN_NAME}_values.yaml \\\n--namespace mavryk-network\n")),(0,o.kt)("p",null,"The nodes will start up and establish peer-to-peer connections in a full mesh topology."),(0,o.kt)("p",null,"List all of your running nodes: ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl -n mavryk-network get pods -l appType=mavkit-node")),(0,o.kt)("h2",{id:"adding-external-nodes-to-the-cluster"},"Adding external nodes to the cluster"),(0,o.kt)("p",null,"External nodes to your local cluster can be added to your network by sharing a yaml file\ngenerated by the ",(0,o.kt)("inlineCode",{parentName:"p"},"mkmavrykchain")," command."),(0,o.kt)("p",null,"The file is located at: ",(0,o.kt)("inlineCode",{parentName:"p"},"<CURRENT WORKING DIRECTORY>/${CHAIN_NAME}_invite_values.yaml")),(0,o.kt)("p",null,"Send this file to the recipients you want to invite."),(0,o.kt)("h3",{id:"on-the-computer-of-the-joining-node"},"On the computer of the joining node"),(0,o.kt)("p",null,"The member needs to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Follow the ",(0,o.kt)("a",{parentName:"li",href:"#installing-prerequisites"},"prerequisite installation instructions")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#start-minikube"},"Start minikube"))),(0,o.kt)("p",null,"Then run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add mavryk-network https://mavryk-network.github.io/mavryk-helm-charts\n\nhelm install $CHAIN_NAME mavryk-network/mavryk-chain \\\n--values <LOCATION OF ${CHAIN_NAME}_invite_values.yaml> \\\n--namespace mavryk-network --create-namespace\n")),(0,o.kt)("p",null,"At this point additional nodes will be added in a full mesh\ntopology."),(0,o.kt)("p",null,"Congratulations! You now have a multi-node Mavryk based permissioned chain."),(0,o.kt)("p",null,"On each computer, run this command to check that the nodes have matching heads by comparing their hashes (it may take a minute for the nodes to sync up):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get pod -n mavryk-network -l appType=mavkit-node -o name |\nwhile read line;\n  do kubectl -n mavryk-network exec $line -c mavkit-node -- /usr/local/bin/mavkit-client rpc get /chains/main/blocks/head/hash;\ndone\n")))}k.isMDXComponent=!0}}]);